#Â Info on the action
name: Automatic Publishing
run-name: ${{ github.actor }} is publishing ðŸ“¸

on:
  # Run automatically on main pushes
  push:
    branches:
      - main
    paths:
      - 'shaders/**.glsl'
  # Or run on manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

env:
  TARGET_REPO: 'shadertoy-to-video'
  TARGET_IMAGE: 'shader_renderer:latest'

jobs:
  # Gets all the different files
  getChanges:
    runs-on: ubuntu-latest
    # Return the files as outputs
    outputs:
      FILES: ${{ steps.prep.outputs.FILES }}
      TOTAL_FILES: ${{ steps.prep.outputs.TOTAL_FILES }}
    steps:
      - name: 'Checking out code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # https://github.com/dorny/paths-filter
      # Look out for additions to the shaders
      - name: 'Getting the changes'
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            shaders:
              - added: 'shaders/**.glsl'
          initial-fetch-depth: 1
          list-files: 'json'
      - name: 'Prepare job outputs'
        id: prep
        run: |
          echo "TOTAL_FILES=${{steps.changes.outputs.shaders_count}}" >> $GITHUB_OUTPUT
          if [[ '${{steps.changes.outputs.shaders}}' -eq 'true' ]]; then
            ESCAPED_FILES=$(echo '${{steps.changes.outputs.shaders_files}}')
            echo "FILES=$ESCAPED_FILES" >> $GITHUB_OUTPUT
          else
            echo "Defaulting to no files..."
            echo "FILES=[]" >> $GITHUB_OUTPUT
          fi
      - name: 'Debug outputs'
        run: echo ${{ steps.prep.outputs.FILES }}

  # Build the image and just push it to the local artifacts
  # Avoid building the image if no files
  prepareDockerImage:
    runs-on: ubuntu-latest
    needs: [getChanges]
    if: needs.getChanges.outputs.TOTAL_FILES > 0
    steps:
      - name: 'Checking out the code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Building the Docker renderer image'
        run: docker build --no-cache -t ${{env.TARGET_IMAGE}} .
      # Uploads the image locally to minimise build times
      # https://github.com/ishworkh/container-image-artifact-upload
      - name: Upload image
        uses: ishworkh/container-image-artifact-upload@v1.0.0
        with:
          image: '${{env.TARGET_IMAGE}}'
          retention_days: '2'

  # Creates the different renders
  createRenders:
    runs-on: ubuntu-latest
    needs: [getChanges, prepareDockerImage]
    if: needs.getChanges.outputs.TOTAL_FILES > 0
    # Will run once for each file
    strategy:
      matrix:
        shader: ${{ fromJSON(needs.getChanges.outputs.FILES) }}
    steps:
      - name: 'Checking out the code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # https://github.com/ishworkh/container-image-artifact-download
      - name: 'Download image for using locally'
        uses: ishworkh/container-image-artifact-download@v1.0.0
        with:
          image: '${{env.TARGET_IMAGE}}'
      # Don't make it tty
      # It still waits and shows the progress
      - name: 'Rendering the shader via Docker'
        run: |
          docker run --rm \
            -v $PWD/shaders:/shaders \
            -e BUILD_ARGUMENTS="--output ${{matrix.shader}}.mp4 --size=800x800 --rate=60 --bitrate=5M --duration=30.0" \
            -e BUILD_TARGET="${{matrix.shader}}" \
            ${{env.TARGET_IMAGE}}
      - name: 'Get Artifact Basename'
        id: artifact_name
        run: |
          FILE="${{matrix.shader}}"
          FULL_NAME=${FILE##*/}
          FILENAME="${FULL_NAME%.*}"
          echo "FILENAME=$FILENAME" >> $GITHUB_OUTPUT
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.artifact_name.outputs.FILENAME}}
          path: ${{matrix.shader}}.mp4
          retention-days: 7

  #Â Renders uploaded have this URL schema https://tmpfiles.org/3436989/sun.png
  uploadRenders:
    runs-on: ubuntu-latest
    needs: [createRenders, getChanges]
    # Will run once for each file
    strategy:
      matrix:
        shader: ${{ fromJSON(needs.getChanges.outputs.FILES) }}
    # Outputs the different URLs
    outputs:
      URL: ${{ steps.upload.outputs.URL }}
    steps:
      - name: 'Get Artifact Basename'
        id: artifact_name
        run: |
          FILE="${{matrix.shader}}"
          FULL_NAME=${FILE##*/}
          FILENAME="${FULL_NAME%.*}"
          echo "FILENAME=$FILENAME" >> $GITHUB_OUTPUT
      - name: 'Download Artifacts'
        uses: actions/download-artifact@v3
        with:
          name: ${{steps.artifact_name.outputs.FILENAME}}
          path: ${{matrix.shader}}.mp4
      - name: 'Upload to temporary server'
        id: upload
        run: |
          RESPONSE=$(curl -F "file=@${{matrix.shader}}.mp4" https://tmpfiles.org/api/v1/upload)
          echo "Response from the temporary fileserver is $RESPONSE"
          URL=$(echo $RESPONSE | jq -r ".data.url")
          echo "$URL" > ${{steps.artifact_name.outputs.FILENAME}}.url
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.artifact_name.outputs.FILENAME}}_url
          path: ${{steps.artifact_name.outputs.FILENAME}}.url
          retention-days: 7

  # Notify for renders
  notifyWithEmail:
    runs-on: ubuntu-latest
    needs: [uploadRenders, getChanges]
    # Will run once for each generated URL
    strategy:
      matrix:
        shader: ${{ fromJSON(needs.getChanges.outputs.FILES) }}
    steps:
      - name: 'Get Artifact Basename'
        id: artifact_name
        run: |
          FILE="${{matrix.shader}}"
          FULL_NAME=${FILE##*/}
          FILENAME="${FULL_NAME%.*}"
          echo "FILENAME=$FILENAME" >> $GITHUB_OUTPUT
      - name: 'Download Artifacts'
        uses: actions/download-artifact@v3
        with:
          name: ${{steps.artifact_name.outputs.FILENAME}}_url
          path: ${{steps.artifact_name.outputs.FILENAME}}.url
      # Update with version if release
      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # Prepare to send email
      - name: 'Prepare email payload'
        id: email_prep
        run: |
          export FILENAME_BASE=$(openssl rand -base64 12)
          export FILENAME="${FILENAME_BASE}_message.json"
          export URL=$(cat ${{steps.artifact_name.outputs.FILENAME}}.url)
          echo "{\"Data\": \"From: ${{secrets.EMAIL_FROM}}\nTo: ${{secrets.EMAIL_TO}}\nSubject: [${{secrets.IG_ACCOUNT}}] New Post \nMIME-Version: 1.0\nContent-type: Multipart/Mixed; boundary=\\\"NextPart\\\"\n\n--NextPart\nContent-Type: text/plain\n\nYou can find the render for the post in here $URL\n\n--NextPart--\"}" > $FILENAME
          echo "FILENAME=$FILENAME" >> $GITHUB_OUTPUT
      # Send the actual email
      - name: 'Send email payload'
        run: |
          aws ses send-raw-email --region ${{ secrets.AWS_REGION }} --cli-binary-format raw-in-base64-out --raw-message file://${{steps.email_prep.outputs.FILENAME}}
